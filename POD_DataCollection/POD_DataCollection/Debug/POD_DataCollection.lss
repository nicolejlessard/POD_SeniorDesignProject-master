
POD_DataCollection.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000950  000009c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000950  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000009d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a04  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bf5  00000000  00000000  00000a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007e4  00000000  00000000  00001689  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004be  00000000  00000000  00001e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  0000232c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a1  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000621  00000000  00000000  00002895  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002eb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f9 e0       	ldi	r31, 0x09	; 9
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <main>
  8e:	0c 94 a6 04 	jmp	0x94c	; 0x94c <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <serial_init>:
	 }
	 
 }
 
 void serial_init(void){
	 UBRR0H  = (MYUBRR >> 8);
  96:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	 UBRR0L  = MYUBRR;
  9a:	87 e6       	ldi	r24, 0x67	; 103
  9c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	 
	 UCSR0B |= (1<<RXEN0)  | (1<<TXEN0);
  a0:	e1 ec       	ldi	r30, 0xC1	; 193
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	88 61       	ori	r24, 0x18	; 24
  a8:	80 83       	st	Z, r24
	 UCSR0C |= (1<<UCSZ00) | (1<<UCSZ01);
  aa:	e2 ec       	ldi	r30, 0xC2	; 194
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	86 60       	ori	r24, 0x06	; 6
  b2:	80 83       	st	Z, r24
  b4:	08 95       	ret

000000b6 <serial_sendbit>:
 }
 
 void serial_sendbit(char bit){
	 while( ( UCSR0A & ( 1 << UDRE0 ) ) == 0 );
  b6:	e0 ec       	ldi	r30, 0xC0	; 192
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	90 81       	ld	r25, Z
  bc:	95 ff       	sbrs	r25, 5
  be:	fd cf       	rjmp	.-6      	; 0xba <serial_sendbit+0x4>
	 UDR0 = bit;
  c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  c4:	08 95       	ret

000000c6 <dht_read_data>:
	 int last_state=1;
	 int counter=0;
	 int data[5] = {0, 0, 0, 0, 0};
	 
	 // Set DHT pin to 1 and wait 250 ms
	 DDRD |= (1 << pin); 		// Ensure pin is output
  c6:	9a b1       	in	r25, 0x0a	; 10
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	70 e0       	ldi	r23, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <dht_read_data+0xc>
  ce:	66 0f       	add	r22, r22
  d0:	77 1f       	adc	r23, r23
  d2:	8a 95       	dec	r24
  d4:	e2 f7       	brpl	.-8      	; 0xce <dht_read_data+0x8>
  d6:	96 2b       	or	r25, r22
  d8:	9a b9       	out	0x0a, r25	; 10
	 PORTD |= (1 << pin);
  da:	8b b1       	in	r24, 0x0b	; 11
  dc:	86 2b       	or	r24, r22
  de:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	34 e3       	ldi	r19, 0x34	; 52
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	30 40       	sbci	r19, 0x00	; 0
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <dht_read_data+0x20>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <dht_read_data+0x2a>
  f0:	00 00       	nop
	 _delay_ms(250);
	 
	 // Request Reading: 
	 // Pull pin low for 18 ms
	 PORTD &= ~(1 << pin);
  f2:	9b b1       	in	r25, 0x0b	; 11
  f4:	86 2f       	mov	r24, r22
  f6:	80 95       	com	r24
  f8:	98 23       	and	r25, r24
  fa:	9b b9       	out	0x0b, r25	; 11
  fc:	9f ef       	ldi	r25, 0xFF	; 255
  fe:	20 ee       	ldi	r18, 0xE0	; 224
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	91 50       	subi	r25, 0x01	; 1
 104:	20 40       	sbci	r18, 0x00	; 0
 106:	30 40       	sbci	r19, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <dht_read_data+0x3c>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <dht_read_data+0x46>
 10c:	00 00       	nop
	 _delay_ms(18);
	 
	 // Pull pin high for 40 ms
	 PORTD |= (1 << pin);
 10e:	9b b1       	in	r25, 0x0b	; 11
 110:	96 2b       	or	r25, r22
 112:	9b b9       	out	0x0b, r25	; 11
 114:	9f ef       	ldi	r25, 0xFF	; 255
 116:	23 ef       	ldi	r18, 0xF3	; 243
 118:	31 e0       	ldi	r19, 0x01	; 1
 11a:	91 50       	subi	r25, 0x01	; 1
 11c:	20 40       	sbci	r18, 0x00	; 0
 11e:	30 40       	sbci	r19, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <dht_read_data+0x54>
 122:	00 c0       	rjmp	.+0      	; 0x124 <dht_read_data+0x5e>
 124:	00 00       	nop
	 _delay_ms(40);
	 
	 // Set pin to input
	 DDRD &= ~(1 << pin);
 126:	9a b1       	in	r25, 0x0a	; 10
 128:	89 23       	and	r24, r25
 12a:	8a b9       	out	0x0a, r24	; 10
 12c:	e5 e5       	ldi	r30, 0x55	; 85
 12e:	f0 e0       	ldi	r31, 0x00	; 0
	 
	 int tmp=0;
	 int sum=0; 
	 int x=0;
	 int y=0;
	 int last_state=1;
 130:	41 e0       	ldi	r20, 0x01	; 1
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
	 for(x = 0; x < MAXTIMINGS; x++){
		 
		 counter = 0;
		 
		 while(1){
			 tmp = ((PIND & (1 << pin)) >> 1);
 138:	89 b1       	in	r24, 0x09	; 9
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	90 e1       	ldi	r25, 0x10	; 16
 13c:	9a 95       	dec	r25
 13e:	f1 f7       	brne	.-4      	; 0x13c <dht_read_data+0x76>
			 _delay_us(3);
			 
			 if(tmp != last_state) break;
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	86 23       	and	r24, r22
 144:	97 23       	and	r25, r23
 146:	95 95       	asr	r25
 148:	87 95       	ror	r24
 14a:	84 17       	cp	r24, r20
 14c:	95 07       	cpc	r25, r21
 14e:	51 f4       	brne	.+20     	; 0x164 <dht_read_data+0x9e>
			 
			 counter++; 
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <dht_read_data+0x90>
 15a:	00 00       	nop
			 _delay_us(1);
			 
			 if(counter == 255) break;
 15c:	2f 3f       	cpi	r18, 0xFF	; 255
 15e:	31 05       	cpc	r19, r1
 160:	59 f7       	brne	.-42     	; 0x138 <dht_read_data+0x72>
 162:	0c c0       	rjmp	.+24     	; 0x17c <dht_read_data+0xb6>
		 }
		 
		 last_state = ((PIND & (1 << pin)) >> 1);
 164:	49 b1       	in	r20, 0x09	; 9
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	46 23       	and	r20, r22
 16a:	57 23       	and	r21, r23
 16c:	55 95       	asr	r21
 16e:	47 95       	ror	r20
		 
		 if(counter == 255) break;
 170:	2f 3f       	cpi	r18, 0xFF	; 255
 172:	31 05       	cpc	r19, r1
 174:	21 f0       	breq	.+8      	; 0x17e <dht_read_data+0xb8>
 176:	31 97       	sbiw	r30, 0x01	; 1
	 
	 // Set pin to input
	 DDRD &= ~(1 << pin);
	 
	 // Read data
	 for(x = 0; x < MAXTIMINGS; x++){
 178:	e9 f6       	brne	.-70     	; 0x134 <dht_read_data+0x6e>
 17a:	01 c0       	rjmp	.+2      	; 0x17e <dht_read_data+0xb8>
			 _delay_us(1);
			 
			 if(counter == 255) break;
		 }
		 
		 last_state = ((PIND & (1 << pin)) >> 1);
 17c:	89 b1       	in	r24, 0x09	; 9
	 
	 if((y >= 40) && (data[4] == (sum & 0xFF))) return 0;	// Check if data is good
	 
	 return -1;
	 
 }
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	9f ef       	ldi	r25, 0xFF	; 255
 182:	08 95       	ret

00000184 <read_soil>:
 
 float read_soil(int pin){
	 
	 PORTD |= (1 << SparkFun_Power); // Turn on SparkFun sensor
 184:	5f 9a       	sbi	0x0b, 7	; 11
	 
	 ADCSRA |= (1 << ADSC);			// Start ADC conversion
 186:	ea e7       	ldi	r30, 0x7A	; 122
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	80 64       	ori	r24, 0x40	; 64
 18e:	80 83       	st	Z, r24
	 
	 while(ADCSRA & (1 << ADSC));	// Wait for conversion to endif
 190:	80 81       	ld	r24, Z
 192:	86 fd       	sbrc	r24, 6
 194:	fd cf       	rjmp	.-6      	; 0x190 <read_soil+0xc>
	 
	 return ADC;					// Return converted value
 196:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 19a:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__floatunsisf>
	 
 }
 1a6:	08 95       	ret

000001a8 <send_data>:
 
 void send_data(float n){
 1a8:	cf 92       	push	r12
 1aa:	df 92       	push	r13
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	6b 01       	movw	r12, r22
 1b6:	7c 01       	movw	r14, r24
	 int whole = 0;
	 float dec = 0.0;
	 
	 // If negative, send negative sign
	 if(n < 0) serial_sendbit('-');
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	a9 01       	movw	r20, r18
 1be:	0e 94 ad 02 	call	0x55a	; 0x55a <__cmpsf2>
 1c2:	88 23       	and	r24, r24
 1c4:	1c f4       	brge	.+6      	; 0x1cc <send_data+0x24>
 1c6:	8d e2       	ldi	r24, 0x2D	; 45
 1c8:	0e 94 5b 00 	call	0xb6	; 0xb6 <serial_sendbit>
	 
	 // Send whole part of number
	 whole = (int)n;
 1cc:	c7 01       	movw	r24, r14
 1ce:	b6 01       	movw	r22, r12
 1d0:	0e 94 24 03 	call	0x648	; 0x648 <__fixsfsi>
 1d4:	eb 01       	movw	r28, r22
	 
	 // Extract decimal
	 dec = (n - whole) * 1000;		// Up to 3 decimal places will be in string
 1d6:	07 2e       	mov	r0, r23
 1d8:	00 0c       	add	r0, r0
 1da:	88 0b       	sbc	r24, r24
 1dc:	99 0b       	sbc	r25, r25
 1de:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__floatsisf>
 1e2:	9b 01       	movw	r18, r22
 1e4:	ac 01       	movw	r20, r24
 1e6:	c7 01       	movw	r24, r14
 1e8:	b6 01       	movw	r22, r12
 1ea:	0e 94 40 02 	call	0x480	; 0x480 <__subsf3>
 1ee:	20 e0       	ldi	r18, 0x00	; 0
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	4a e7       	ldi	r20, 0x7A	; 122
 1f4:	54 e4       	ldi	r21, 0x44	; 68
 1f6:	0e 94 11 04 	call	0x822	; 0x822 <__mulsf3>
 1fa:	6b 01       	movw	r12, r22
 1fc:	7c 01       	movw	r14, r24
	 
	 // Send integer part of number
	 if(whole >= 100){
 1fe:	c4 36       	cpi	r28, 0x64	; 100
 200:	d1 05       	cpc	r29, r1
 202:	74 f0       	brlt	.+28     	; 0x220 <send_data+0x78>
		 whole = whole % 1000;
 204:	ce 01       	movw	r24, r28
 206:	68 ee       	ldi	r22, 0xE8	; 232
 208:	73 e0       	ldi	r23, 0x03	; 3
 20a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divmodhi4>
 20e:	ec 01       	movw	r28, r24
		 
		 serial_sendbit(whole/100 + '0');
 210:	64 e6       	ldi	r22, 0x64	; 100
 212:	70 e0       	ldi	r23, 0x00	; 0
 214:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divmodhi4>
 218:	80 e3       	ldi	r24, 0x30	; 48
 21a:	86 0f       	add	r24, r22
 21c:	0e 94 5b 00 	call	0xb6	; 0xb6 <serial_sendbit>
	 }
	 
	 if(whole >= 10){
 220:	ca 30       	cpi	r28, 0x0A	; 10
 222:	d1 05       	cpc	r29, r1
 224:	74 f0       	brlt	.+28     	; 0x242 <send_data+0x9a>
		 whole = whole % 100;
 226:	ce 01       	movw	r24, r28
 228:	64 e6       	ldi	r22, 0x64	; 100
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divmodhi4>
 230:	ec 01       	movw	r28, r24
		 
		 serial_sendbit(whole/10 + '0');
 232:	6a e0       	ldi	r22, 0x0A	; 10
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divmodhi4>
 23a:	80 e3       	ldi	r24, 0x30	; 48
 23c:	86 0f       	add	r24, r22
 23e:	0e 94 5b 00 	call	0xb6	; 0xb6 <serial_sendbit>
	 }
	 
	whole = whole % 10;
		 
	serial_sendbit(whole + '0');
 242:	ce 01       	movw	r24, r28
 244:	6a e0       	ldi	r22, 0x0A	; 10
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divmodhi4>
 24c:	80 5d       	subi	r24, 0xD0	; 208
 24e:	0e 94 5b 00 	call	0xb6	; 0xb6 <serial_sendbit>
	 	 
	 serial_sendbit('.');
 252:	8e e2       	ldi	r24, 0x2E	; 46
 254:	0e 94 5b 00 	call	0xb6	; 0xb6 <serial_sendbit>
	 
	 // Send decimal part of number
	 if(dec >= 100){
 258:	20 e0       	ldi	r18, 0x00	; 0
 25a:	30 e0       	ldi	r19, 0x00	; 0
 25c:	48 ec       	ldi	r20, 0xC8	; 200
 25e:	52 e4       	ldi	r21, 0x42	; 66
 260:	c7 01       	movw	r24, r14
 262:	b6 01       	movw	r22, r12
 264:	0e 94 0c 04 	call	0x818	; 0x818 <__gesf2>
 268:	88 23       	and	r24, r24
 26a:	14 f1       	brlt	.+68     	; 0x2b0 <send_data+0x108>
		 dec = (int) dec % 1000;
 26c:	c7 01       	movw	r24, r14
 26e:	b6 01       	movw	r22, r12
 270:	0e 94 24 03 	call	0x648	; 0x648 <__fixsfsi>
 274:	cb 01       	movw	r24, r22
 276:	68 ee       	ldi	r22, 0xE8	; 232
 278:	73 e0       	ldi	r23, 0x03	; 3
 27a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divmodhi4>
 27e:	bc 01       	movw	r22, r24
 280:	99 0f       	add	r25, r25
 282:	88 0b       	sbc	r24, r24
 284:	99 0b       	sbc	r25, r25
 286:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__floatsisf>
 28a:	6b 01       	movw	r12, r22
 28c:	7c 01       	movw	r14, r24
		 
		 serial_sendbit(dec/100 + '0');
 28e:	20 e0       	ldi	r18, 0x00	; 0
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	48 ec       	ldi	r20, 0xC8	; 200
 294:	52 e4       	ldi	r21, 0x42	; 66
 296:	0e 94 b2 02 	call	0x564	; 0x564 <__divsf3>
 29a:	20 e0       	ldi	r18, 0x00	; 0
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	40 e4       	ldi	r20, 0x40	; 64
 2a0:	52 e4       	ldi	r21, 0x42	; 66
 2a2:	0e 94 41 02 	call	0x482	; 0x482 <__addsf3>
 2a6:	0e 94 2b 03 	call	0x656	; 0x656 <__fixunssfsi>
 2aa:	86 2f       	mov	r24, r22
 2ac:	0e 94 5b 00 	call	0xb6	; 0xb6 <serial_sendbit>
	 }
	 
	 if(dec >= 10){
 2b0:	20 e0       	ldi	r18, 0x00	; 0
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	40 e2       	ldi	r20, 0x20	; 32
 2b6:	51 e4       	ldi	r21, 0x41	; 65
 2b8:	c7 01       	movw	r24, r14
 2ba:	b6 01       	movw	r22, r12
 2bc:	0e 94 0c 04 	call	0x818	; 0x818 <__gesf2>
 2c0:	88 23       	and	r24, r24
 2c2:	14 f1       	brlt	.+68     	; 0x308 <send_data+0x160>
		 dec = (int) dec % 100;
 2c4:	c7 01       	movw	r24, r14
 2c6:	b6 01       	movw	r22, r12
 2c8:	0e 94 24 03 	call	0x648	; 0x648 <__fixsfsi>
 2cc:	cb 01       	movw	r24, r22
 2ce:	64 e6       	ldi	r22, 0x64	; 100
 2d0:	70 e0       	ldi	r23, 0x00	; 0
 2d2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divmodhi4>
 2d6:	bc 01       	movw	r22, r24
 2d8:	99 0f       	add	r25, r25
 2da:	88 0b       	sbc	r24, r24
 2dc:	99 0b       	sbc	r25, r25
 2de:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__floatsisf>
 2e2:	6b 01       	movw	r12, r22
 2e4:	7c 01       	movw	r14, r24
		 
		 serial_sendbit(dec/10 + '0');
 2e6:	20 e0       	ldi	r18, 0x00	; 0
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	40 e2       	ldi	r20, 0x20	; 32
 2ec:	51 e4       	ldi	r21, 0x41	; 65
 2ee:	0e 94 b2 02 	call	0x564	; 0x564 <__divsf3>
 2f2:	20 e0       	ldi	r18, 0x00	; 0
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	40 e4       	ldi	r20, 0x40	; 64
 2f8:	52 e4       	ldi	r21, 0x42	; 66
 2fa:	0e 94 41 02 	call	0x482	; 0x482 <__addsf3>
 2fe:	0e 94 2b 03 	call	0x656	; 0x656 <__fixunssfsi>
 302:	86 2f       	mov	r24, r22
 304:	0e 94 5b 00 	call	0xb6	; 0xb6 <serial_sendbit>
	 }
	
	dec = (int) dec % 10;
 308:	c7 01       	movw	r24, r14
 30a:	b6 01       	movw	r22, r12
 30c:	0e 94 24 03 	call	0x648	; 0x648 <__fixsfsi>
 310:	cb 01       	movw	r24, r22
 312:	6a e0       	ldi	r22, 0x0A	; 10
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	0e 94 7e 04 	call	0x8fc	; 0x8fc <__divmodhi4>
		 
	serial_sendbit(dec + '0');
 31a:	bc 01       	movw	r22, r24
 31c:	99 0f       	add	r25, r25
 31e:	88 0b       	sbc	r24, r24
 320:	99 0b       	sbc	r25, r25
 322:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__floatsisf>
 326:	20 e0       	ldi	r18, 0x00	; 0
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	40 e4       	ldi	r20, 0x40	; 64
 32c:	52 e4       	ldi	r21, 0x42	; 66
 32e:	0e 94 41 02 	call	0x482	; 0x482 <__addsf3>
 332:	0e 94 2b 03 	call	0x656	; 0x656 <__fixunssfsi>
 336:	86 2f       	mov	r24, r22
 338:	0e 94 5b 00 	call	0xb6	; 0xb6 <serial_sendbit>
	 
	 return;
 }
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	ff 90       	pop	r15
 342:	ef 90       	pop	r14
 344:	df 90       	pop	r13
 346:	cf 90       	pop	r12
 348:	08 95       	ret

0000034a <send_error>:
 
 void send_error(void){
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
 35a:	2c 97       	sbiw	r28, 0x0c	; 12
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	f8 94       	cli
 360:	de bf       	out	0x3e, r29	; 62
 362:	0f be       	out	0x3f, r0	; 63
 364:	cd bf       	out	0x3d, r28	; 61
	 char error[12] = "Sensor Error";
 366:	8c e0       	ldi	r24, 0x0C	; 12
 368:	e0 e0       	ldi	r30, 0x00	; 0
 36a:	f1 e0       	ldi	r31, 0x01	; 1
 36c:	de 01       	movw	r26, r28
 36e:	11 96       	adiw	r26, 0x01	; 1
 370:	01 90       	ld	r0, Z+
 372:	0d 92       	st	X+, r0
 374:	8a 95       	dec	r24
 376:	e1 f7       	brne	.-8      	; 0x370 <send_error+0x26>
 378:	8e 01       	movw	r16, r28
 37a:	0f 5f       	subi	r16, 0xFF	; 255
 37c:	1f 4f       	sbci	r17, 0xFF	; 255
 37e:	7e 01       	movw	r14, r28
 380:	8d e0       	ldi	r24, 0x0D	; 13
 382:	e8 0e       	add	r14, r24
 384:	f1 1c       	adc	r15, r1
	 int x;
	 
	 for(x = 0; x < 12; x++){
		 serial_sendbit(error[x]);
 386:	f8 01       	movw	r30, r16
 388:	81 91       	ld	r24, Z+
 38a:	8f 01       	movw	r16, r30
 38c:	0e 94 5b 00 	call	0xb6	; 0xb6 <serial_sendbit>
 
 void send_error(void){
	 char error[12] = "Sensor Error";
	 int x;
	 
	 for(x = 0; x < 12; x++){
 390:	0e 15       	cp	r16, r14
 392:	1f 05       	cpc	r17, r15
 394:	c1 f7       	brne	.-16     	; 0x386 <send_error+0x3c>
		 serial_sendbit(error[x]);
	 }
 }
 396:	2c 96       	adiw	r28, 0x0c	; 12
 398:	0f b6       	in	r0, 0x3f	; 63
 39a:	f8 94       	cli
 39c:	de bf       	out	0x3e, r29	; 62
 39e:	0f be       	out	0x3f, r0	; 63
 3a0:	cd bf       	out	0x3d, r28	; 61
 3a2:	df 91       	pop	r29
 3a4:	cf 91       	pop	r28
 3a6:	1f 91       	pop	r17
 3a8:	0f 91       	pop	r16
 3aa:	ff 90       	pop	r15
 3ac:	ef 90       	pop	r14
 3ae:	08 95       	ret

000003b0 <main>:
	 
	 float temp=0.0, humidity=0.0, moisture=0.0;
	 int seconds = 0, quarters = 0;
	 
	  // Initialize DHT22 Data Pin
	  DDRD |= (1 << DHT_Data);		// Set pin to output
 3b0:	52 9a       	sbi	0x0a, 2	; 10
	  PORTD |= (1 << DHT_Data);		// Ensure pin is outputing 1
 3b2:	5a 9a       	sbi	0x0b, 2	; 11
	 
	 // Initialize SparkFun Power Pin
	 DDRD |= (1 << SparkFun_Power);	// Set pin to output
 3b4:	57 9a       	sbi	0x0a, 7	; 10
	 PORTD &= ~(1 << SparkFun_Power); // Ensure SparkFun sensor is off 
 3b6:	5f 98       	cbi	0x0b, 7	; 11
	 
	 // Initialize ADC to read SparkFun value
	 ADCSRA |= (1 << ADEN); 		// Enable ADC
 3b8:	ea e7       	ldi	r30, 0x7A	; 122
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	80 68       	ori	r24, 0x80	; 128
 3c0:	80 83       	st	Z, r24
	 ADMUX &= ~0xF0;					// Clear MUX3..0, When MUX3..0 AC0 is selected for ADC
 3c2:	ec e7       	ldi	r30, 0x7C	; 124
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	8f 70       	andi	r24, 0x0F	; 15
 3ca:	80 83       	st	Z, r24
	 
	 // Initialize serial communication for bluetooth
	 serial_init();
 3cc:	0e 94 4b 00 	call	0x96	; 0x96 <serial_init>
	 
	 while(1){
		 
		 // Gather data
		 if(dht_read_data(DHT_Data, temp, humidity) < 0){
 3d0:	00 e0       	ldi	r16, 0x00	; 0
 3d2:	10 e0       	ldi	r17, 0x00	; 0
 3d4:	98 01       	movw	r18, r16
 3d6:	b9 01       	movw	r22, r18
 3d8:	a8 01       	movw	r20, r16
 3da:	82 e0       	ldi	r24, 0x02	; 2
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0e 94 63 00 	call	0xc6	; 0xc6 <dht_read_data>
 3e2:	99 23       	and	r25, r25
 3e4:	5c f4       	brge	.+22     	; 0x3fc <main+0x4c>
			 
			 send_error();
 3e6:	0e 94 a5 01 	call	0x34a	; 0x34a <send_error>
			 serial_sendbit(',');
 3ea:	8c e2       	ldi	r24, 0x2C	; 44
 3ec:	0e 94 5b 00 	call	0xb6	; 0xb6 <serial_sendbit>
			 send_error();
 3f0:	0e 94 a5 01 	call	0x34a	; 0x34a <send_error>
			 serial_sendbit(',');
 3f4:	8c e2       	ldi	r24, 0x2C	; 44
 3f6:	0e 94 5b 00 	call	0xb6	; 0xb6 <serial_sendbit>
 3fa:	10 c0       	rjmp	.+32     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
			 
		 }
		 
		 else{
			 
			 send_data(temp);
 3fc:	60 e0       	ldi	r22, 0x00	; 0
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	cb 01       	movw	r24, r22
 402:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <send_data>
			 serial_sendbit(',');
 406:	8c e2       	ldi	r24, 0x2C	; 44
 408:	0e 94 5b 00 	call	0xb6	; 0xb6 <serial_sendbit>
			 send_data(humidity);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	cb 01       	movw	r24, r22
 412:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <send_data>
			 serial_sendbit(',');
 416:	8c e2       	ldi	r24, 0x2C	; 44
 418:	0e 94 5b 00 	call	0xb6	; 0xb6 <serial_sendbit>
			 
		 }
		 
		 moisture = read_soil(SparkFun_Power);
 41c:	87 e0       	ldi	r24, 0x07	; 7
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 c2 00 	call	0x184	; 0x184 <read_soil>
		 send_data(moisture);
 424:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <send_data>
		 serial_sendbit(';');
 428:	8b e3       	ldi	r24, 0x3B	; 59
 42a:	0e 94 5b 00 	call	0xb6	; 0xb6 <serial_sendbit>
 42e:	8c e3       	ldi	r24, 0x3C	; 60
 430:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 432:	2f ef       	ldi	r18, 0xFF	; 255
 434:	34 e3       	ldi	r19, 0x34	; 52
 436:	4c e0       	ldi	r20, 0x0C	; 12
 438:	21 50       	subi	r18, 0x01	; 1
 43a:	30 40       	sbci	r19, 0x00	; 0
 43c:	40 40       	sbci	r20, 0x00	; 0
 43e:	e1 f7       	brne	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 440:	00 c0       	rjmp	.+0      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 442:	00 00       	nop
 444:	2f ef       	ldi	r18, 0xFF	; 255
 446:	34 e3       	ldi	r19, 0x34	; 52
 448:	4c e0       	ldi	r20, 0x0C	; 12
 44a:	21 50       	subi	r18, 0x01	; 1
 44c:	30 40       	sbci	r19, 0x00	; 0
 44e:	40 40       	sbci	r20, 0x00	; 0
 450:	e1 f7       	brne	.-8      	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 454:	00 00       	nop
 456:	2f ef       	ldi	r18, 0xFF	; 255
 458:	34 e3       	ldi	r19, 0x34	; 52
 45a:	4c e0       	ldi	r20, 0x0C	; 12
 45c:	21 50       	subi	r18, 0x01	; 1
 45e:	30 40       	sbci	r19, 0x00	; 0
 460:	40 40       	sbci	r20, 0x00	; 0
 462:	e1 f7       	brne	.-8      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 464:	00 c0       	rjmp	.+0      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 466:	00 00       	nop
 468:	2f ef       	ldi	r18, 0xFF	; 255
 46a:	34 e3       	ldi	r19, 0x34	; 52
 46c:	4c e0       	ldi	r20, 0x0C	; 12
 46e:	21 50       	subi	r18, 0x01	; 1
 470:	30 40       	sbci	r19, 0x00	; 0
 472:	40 40       	sbci	r20, 0x00	; 0
 474:	e1 f7       	brne	.-8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 476:	00 c0       	rjmp	.+0      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 478:	00 00       	nop
 47a:	01 97       	sbiw	r24, 0x01	; 1
		 
		 for(seconds = 0; seconds < 60; seconds++){
 47c:	d1 f6       	brne	.-76     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 47e:	a8 cf       	rjmp	.-176    	; 0x3d0 <main+0x20>

00000480 <__subsf3>:
 480:	50 58       	subi	r21, 0x80	; 128

00000482 <__addsf3>:
 482:	bb 27       	eor	r27, r27
 484:	aa 27       	eor	r26, r26
 486:	0e 94 58 02 	call	0x4b0	; 0x4b0 <__addsf3x>
 48a:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__fp_round>
 48e:	0e 94 c4 03 	call	0x788	; 0x788 <__fp_pscA>
 492:	38 f0       	brcs	.+14     	; 0x4a2 <__addsf3+0x20>
 494:	0e 94 cb 03 	call	0x796	; 0x796 <__fp_pscB>
 498:	20 f0       	brcs	.+8      	; 0x4a2 <__addsf3+0x20>
 49a:	39 f4       	brne	.+14     	; 0x4aa <__addsf3+0x28>
 49c:	9f 3f       	cpi	r25, 0xFF	; 255
 49e:	19 f4       	brne	.+6      	; 0x4a6 <__addsf3+0x24>
 4a0:	26 f4       	brtc	.+8      	; 0x4aa <__addsf3+0x28>
 4a2:	0c 94 c1 03 	jmp	0x782	; 0x782 <__fp_nan>
 4a6:	0e f4       	brtc	.+2      	; 0x4aa <__addsf3+0x28>
 4a8:	e0 95       	com	r30
 4aa:	e7 fb       	bst	r30, 7
 4ac:	0c 94 bb 03 	jmp	0x776	; 0x776 <__fp_inf>

000004b0 <__addsf3x>:
 4b0:	e9 2f       	mov	r30, r25
 4b2:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fp_split3>
 4b6:	58 f3       	brcs	.-42     	; 0x48e <__addsf3+0xc>
 4b8:	ba 17       	cp	r27, r26
 4ba:	62 07       	cpc	r22, r18
 4bc:	73 07       	cpc	r23, r19
 4be:	84 07       	cpc	r24, r20
 4c0:	95 07       	cpc	r25, r21
 4c2:	20 f0       	brcs	.+8      	; 0x4cc <__addsf3x+0x1c>
 4c4:	79 f4       	brne	.+30     	; 0x4e4 <__addsf3x+0x34>
 4c6:	a6 f5       	brtc	.+104    	; 0x530 <__addsf3x+0x80>
 4c8:	0c 94 05 04 	jmp	0x80a	; 0x80a <__fp_zero>
 4cc:	0e f4       	brtc	.+2      	; 0x4d0 <__addsf3x+0x20>
 4ce:	e0 95       	com	r30
 4d0:	0b 2e       	mov	r0, r27
 4d2:	ba 2f       	mov	r27, r26
 4d4:	a0 2d       	mov	r26, r0
 4d6:	0b 01       	movw	r0, r22
 4d8:	b9 01       	movw	r22, r18
 4da:	90 01       	movw	r18, r0
 4dc:	0c 01       	movw	r0, r24
 4de:	ca 01       	movw	r24, r20
 4e0:	a0 01       	movw	r20, r0
 4e2:	11 24       	eor	r1, r1
 4e4:	ff 27       	eor	r31, r31
 4e6:	59 1b       	sub	r21, r25
 4e8:	99 f0       	breq	.+38     	; 0x510 <__addsf3x+0x60>
 4ea:	59 3f       	cpi	r21, 0xF9	; 249
 4ec:	50 f4       	brcc	.+20     	; 0x502 <__addsf3x+0x52>
 4ee:	50 3e       	cpi	r21, 0xE0	; 224
 4f0:	68 f1       	brcs	.+90     	; 0x54c <__addsf3x+0x9c>
 4f2:	1a 16       	cp	r1, r26
 4f4:	f0 40       	sbci	r31, 0x00	; 0
 4f6:	a2 2f       	mov	r26, r18
 4f8:	23 2f       	mov	r18, r19
 4fa:	34 2f       	mov	r19, r20
 4fc:	44 27       	eor	r20, r20
 4fe:	58 5f       	subi	r21, 0xF8	; 248
 500:	f3 cf       	rjmp	.-26     	; 0x4e8 <__addsf3x+0x38>
 502:	46 95       	lsr	r20
 504:	37 95       	ror	r19
 506:	27 95       	ror	r18
 508:	a7 95       	ror	r26
 50a:	f0 40       	sbci	r31, 0x00	; 0
 50c:	53 95       	inc	r21
 50e:	c9 f7       	brne	.-14     	; 0x502 <__addsf3x+0x52>
 510:	7e f4       	brtc	.+30     	; 0x530 <__addsf3x+0x80>
 512:	1f 16       	cp	r1, r31
 514:	ba 0b       	sbc	r27, r26
 516:	62 0b       	sbc	r22, r18
 518:	73 0b       	sbc	r23, r19
 51a:	84 0b       	sbc	r24, r20
 51c:	ba f0       	brmi	.+46     	; 0x54c <__addsf3x+0x9c>
 51e:	91 50       	subi	r25, 0x01	; 1
 520:	a1 f0       	breq	.+40     	; 0x54a <__addsf3x+0x9a>
 522:	ff 0f       	add	r31, r31
 524:	bb 1f       	adc	r27, r27
 526:	66 1f       	adc	r22, r22
 528:	77 1f       	adc	r23, r23
 52a:	88 1f       	adc	r24, r24
 52c:	c2 f7       	brpl	.-16     	; 0x51e <__addsf3x+0x6e>
 52e:	0e c0       	rjmp	.+28     	; 0x54c <__addsf3x+0x9c>
 530:	ba 0f       	add	r27, r26
 532:	62 1f       	adc	r22, r18
 534:	73 1f       	adc	r23, r19
 536:	84 1f       	adc	r24, r20
 538:	48 f4       	brcc	.+18     	; 0x54c <__addsf3x+0x9c>
 53a:	87 95       	ror	r24
 53c:	77 95       	ror	r23
 53e:	67 95       	ror	r22
 540:	b7 95       	ror	r27
 542:	f7 95       	ror	r31
 544:	9e 3f       	cpi	r25, 0xFE	; 254
 546:	08 f0       	brcs	.+2      	; 0x54a <__addsf3x+0x9a>
 548:	b0 cf       	rjmp	.-160    	; 0x4aa <__addsf3+0x28>
 54a:	93 95       	inc	r25
 54c:	88 0f       	add	r24, r24
 54e:	08 f0       	brcs	.+2      	; 0x552 <__addsf3x+0xa2>
 550:	99 27       	eor	r25, r25
 552:	ee 0f       	add	r30, r30
 554:	97 95       	ror	r25
 556:	87 95       	ror	r24
 558:	08 95       	ret

0000055a <__cmpsf2>:
 55a:	0e 94 97 03 	call	0x72e	; 0x72e <__fp_cmp>
 55e:	08 f4       	brcc	.+2      	; 0x562 <__cmpsf2+0x8>
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	08 95       	ret

00000564 <__divsf3>:
 564:	0e 94 c6 02 	call	0x58c	; 0x58c <__divsf3x>
 568:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__fp_round>
 56c:	0e 94 cb 03 	call	0x796	; 0x796 <__fp_pscB>
 570:	58 f0       	brcs	.+22     	; 0x588 <__divsf3+0x24>
 572:	0e 94 c4 03 	call	0x788	; 0x788 <__fp_pscA>
 576:	40 f0       	brcs	.+16     	; 0x588 <__divsf3+0x24>
 578:	29 f4       	brne	.+10     	; 0x584 <__divsf3+0x20>
 57a:	5f 3f       	cpi	r21, 0xFF	; 255
 57c:	29 f0       	breq	.+10     	; 0x588 <__divsf3+0x24>
 57e:	0c 94 bb 03 	jmp	0x776	; 0x776 <__fp_inf>
 582:	51 11       	cpse	r21, r1
 584:	0c 94 06 04 	jmp	0x80c	; 0x80c <__fp_szero>
 588:	0c 94 c1 03 	jmp	0x782	; 0x782 <__fp_nan>

0000058c <__divsf3x>:
 58c:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fp_split3>
 590:	68 f3       	brcs	.-38     	; 0x56c <__divsf3+0x8>

00000592 <__divsf3_pse>:
 592:	99 23       	and	r25, r25
 594:	b1 f3       	breq	.-20     	; 0x582 <__divsf3+0x1e>
 596:	55 23       	and	r21, r21
 598:	91 f3       	breq	.-28     	; 0x57e <__divsf3+0x1a>
 59a:	95 1b       	sub	r25, r21
 59c:	55 0b       	sbc	r21, r21
 59e:	bb 27       	eor	r27, r27
 5a0:	aa 27       	eor	r26, r26
 5a2:	62 17       	cp	r22, r18
 5a4:	73 07       	cpc	r23, r19
 5a6:	84 07       	cpc	r24, r20
 5a8:	38 f0       	brcs	.+14     	; 0x5b8 <__divsf3_pse+0x26>
 5aa:	9f 5f       	subi	r25, 0xFF	; 255
 5ac:	5f 4f       	sbci	r21, 0xFF	; 255
 5ae:	22 0f       	add	r18, r18
 5b0:	33 1f       	adc	r19, r19
 5b2:	44 1f       	adc	r20, r20
 5b4:	aa 1f       	adc	r26, r26
 5b6:	a9 f3       	breq	.-22     	; 0x5a2 <__divsf3_pse+0x10>
 5b8:	35 d0       	rcall	.+106    	; 0x624 <__divsf3_pse+0x92>
 5ba:	0e 2e       	mov	r0, r30
 5bc:	3a f0       	brmi	.+14     	; 0x5cc <__divsf3_pse+0x3a>
 5be:	e0 e8       	ldi	r30, 0x80	; 128
 5c0:	32 d0       	rcall	.+100    	; 0x626 <__divsf3_pse+0x94>
 5c2:	91 50       	subi	r25, 0x01	; 1
 5c4:	50 40       	sbci	r21, 0x00	; 0
 5c6:	e6 95       	lsr	r30
 5c8:	00 1c       	adc	r0, r0
 5ca:	ca f7       	brpl	.-14     	; 0x5be <__divsf3_pse+0x2c>
 5cc:	2b d0       	rcall	.+86     	; 0x624 <__divsf3_pse+0x92>
 5ce:	fe 2f       	mov	r31, r30
 5d0:	29 d0       	rcall	.+82     	; 0x624 <__divsf3_pse+0x92>
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	88 1f       	adc	r24, r24
 5d8:	bb 1f       	adc	r27, r27
 5da:	26 17       	cp	r18, r22
 5dc:	37 07       	cpc	r19, r23
 5de:	48 07       	cpc	r20, r24
 5e0:	ab 07       	cpc	r26, r27
 5e2:	b0 e8       	ldi	r27, 0x80	; 128
 5e4:	09 f0       	breq	.+2      	; 0x5e8 <__divsf3_pse+0x56>
 5e6:	bb 0b       	sbc	r27, r27
 5e8:	80 2d       	mov	r24, r0
 5ea:	bf 01       	movw	r22, r30
 5ec:	ff 27       	eor	r31, r31
 5ee:	93 58       	subi	r25, 0x83	; 131
 5f0:	5f 4f       	sbci	r21, 0xFF	; 255
 5f2:	3a f0       	brmi	.+14     	; 0x602 <__divsf3_pse+0x70>
 5f4:	9e 3f       	cpi	r25, 0xFE	; 254
 5f6:	51 05       	cpc	r21, r1
 5f8:	78 f0       	brcs	.+30     	; 0x618 <__divsf3_pse+0x86>
 5fa:	0c 94 bb 03 	jmp	0x776	; 0x776 <__fp_inf>
 5fe:	0c 94 06 04 	jmp	0x80c	; 0x80c <__fp_szero>
 602:	5f 3f       	cpi	r21, 0xFF	; 255
 604:	e4 f3       	brlt	.-8      	; 0x5fe <__divsf3_pse+0x6c>
 606:	98 3e       	cpi	r25, 0xE8	; 232
 608:	d4 f3       	brlt	.-12     	; 0x5fe <__divsf3_pse+0x6c>
 60a:	86 95       	lsr	r24
 60c:	77 95       	ror	r23
 60e:	67 95       	ror	r22
 610:	b7 95       	ror	r27
 612:	f7 95       	ror	r31
 614:	9f 5f       	subi	r25, 0xFF	; 255
 616:	c9 f7       	brne	.-14     	; 0x60a <__divsf3_pse+0x78>
 618:	88 0f       	add	r24, r24
 61a:	91 1d       	adc	r25, r1
 61c:	96 95       	lsr	r25
 61e:	87 95       	ror	r24
 620:	97 f9       	bld	r25, 7
 622:	08 95       	ret
 624:	e1 e0       	ldi	r30, 0x01	; 1
 626:	66 0f       	add	r22, r22
 628:	77 1f       	adc	r23, r23
 62a:	88 1f       	adc	r24, r24
 62c:	bb 1f       	adc	r27, r27
 62e:	62 17       	cp	r22, r18
 630:	73 07       	cpc	r23, r19
 632:	84 07       	cpc	r24, r20
 634:	ba 07       	cpc	r27, r26
 636:	20 f0       	brcs	.+8      	; 0x640 <__divsf3_pse+0xae>
 638:	62 1b       	sub	r22, r18
 63a:	73 0b       	sbc	r23, r19
 63c:	84 0b       	sbc	r24, r20
 63e:	ba 0b       	sbc	r27, r26
 640:	ee 1f       	adc	r30, r30
 642:	88 f7       	brcc	.-30     	; 0x626 <__divsf3_pse+0x94>
 644:	e0 95       	com	r30
 646:	08 95       	ret

00000648 <__fixsfsi>:
 648:	0e 94 2b 03 	call	0x656	; 0x656 <__fixunssfsi>
 64c:	68 94       	set
 64e:	b1 11       	cpse	r27, r1
 650:	0c 94 06 04 	jmp	0x80c	; 0x80c <__fp_szero>
 654:	08 95       	ret

00000656 <__fixunssfsi>:
 656:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <__fp_splitA>
 65a:	88 f0       	brcs	.+34     	; 0x67e <__fixunssfsi+0x28>
 65c:	9f 57       	subi	r25, 0x7F	; 127
 65e:	98 f0       	brcs	.+38     	; 0x686 <__fixunssfsi+0x30>
 660:	b9 2f       	mov	r27, r25
 662:	99 27       	eor	r25, r25
 664:	b7 51       	subi	r27, 0x17	; 23
 666:	b0 f0       	brcs	.+44     	; 0x694 <__fixunssfsi+0x3e>
 668:	e1 f0       	breq	.+56     	; 0x6a2 <__fixunssfsi+0x4c>
 66a:	66 0f       	add	r22, r22
 66c:	77 1f       	adc	r23, r23
 66e:	88 1f       	adc	r24, r24
 670:	99 1f       	adc	r25, r25
 672:	1a f0       	brmi	.+6      	; 0x67a <__fixunssfsi+0x24>
 674:	ba 95       	dec	r27
 676:	c9 f7       	brne	.-14     	; 0x66a <__fixunssfsi+0x14>
 678:	14 c0       	rjmp	.+40     	; 0x6a2 <__fixunssfsi+0x4c>
 67a:	b1 30       	cpi	r27, 0x01	; 1
 67c:	91 f0       	breq	.+36     	; 0x6a2 <__fixunssfsi+0x4c>
 67e:	0e 94 05 04 	call	0x80a	; 0x80a <__fp_zero>
 682:	b1 e0       	ldi	r27, 0x01	; 1
 684:	08 95       	ret
 686:	0c 94 05 04 	jmp	0x80a	; 0x80a <__fp_zero>
 68a:	67 2f       	mov	r22, r23
 68c:	78 2f       	mov	r23, r24
 68e:	88 27       	eor	r24, r24
 690:	b8 5f       	subi	r27, 0xF8	; 248
 692:	39 f0       	breq	.+14     	; 0x6a2 <__fixunssfsi+0x4c>
 694:	b9 3f       	cpi	r27, 0xF9	; 249
 696:	cc f3       	brlt	.-14     	; 0x68a <__fixunssfsi+0x34>
 698:	86 95       	lsr	r24
 69a:	77 95       	ror	r23
 69c:	67 95       	ror	r22
 69e:	b3 95       	inc	r27
 6a0:	d9 f7       	brne	.-10     	; 0x698 <__fixunssfsi+0x42>
 6a2:	3e f4       	brtc	.+14     	; 0x6b2 <__fixunssfsi+0x5c>
 6a4:	90 95       	com	r25
 6a6:	80 95       	com	r24
 6a8:	70 95       	com	r23
 6aa:	61 95       	neg	r22
 6ac:	7f 4f       	sbci	r23, 0xFF	; 255
 6ae:	8f 4f       	sbci	r24, 0xFF	; 255
 6b0:	9f 4f       	sbci	r25, 0xFF	; 255
 6b2:	08 95       	ret

000006b4 <__floatunsisf>:
 6b4:	e8 94       	clt
 6b6:	09 c0       	rjmp	.+18     	; 0x6ca <__floatsisf+0x12>

000006b8 <__floatsisf>:
 6b8:	97 fb       	bst	r25, 7
 6ba:	3e f4       	brtc	.+14     	; 0x6ca <__floatsisf+0x12>
 6bc:	90 95       	com	r25
 6be:	80 95       	com	r24
 6c0:	70 95       	com	r23
 6c2:	61 95       	neg	r22
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255
 6c6:	8f 4f       	sbci	r24, 0xFF	; 255
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	99 23       	and	r25, r25
 6cc:	a9 f0       	breq	.+42     	; 0x6f8 <__floatsisf+0x40>
 6ce:	f9 2f       	mov	r31, r25
 6d0:	96 e9       	ldi	r25, 0x96	; 150
 6d2:	bb 27       	eor	r27, r27
 6d4:	93 95       	inc	r25
 6d6:	f6 95       	lsr	r31
 6d8:	87 95       	ror	r24
 6da:	77 95       	ror	r23
 6dc:	67 95       	ror	r22
 6de:	b7 95       	ror	r27
 6e0:	f1 11       	cpse	r31, r1
 6e2:	f8 cf       	rjmp	.-16     	; 0x6d4 <__floatsisf+0x1c>
 6e4:	fa f4       	brpl	.+62     	; 0x724 <__floatsisf+0x6c>
 6e6:	bb 0f       	add	r27, r27
 6e8:	11 f4       	brne	.+4      	; 0x6ee <__floatsisf+0x36>
 6ea:	60 ff       	sbrs	r22, 0
 6ec:	1b c0       	rjmp	.+54     	; 0x724 <__floatsisf+0x6c>
 6ee:	6f 5f       	subi	r22, 0xFF	; 255
 6f0:	7f 4f       	sbci	r23, 0xFF	; 255
 6f2:	8f 4f       	sbci	r24, 0xFF	; 255
 6f4:	9f 4f       	sbci	r25, 0xFF	; 255
 6f6:	16 c0       	rjmp	.+44     	; 0x724 <__floatsisf+0x6c>
 6f8:	88 23       	and	r24, r24
 6fa:	11 f0       	breq	.+4      	; 0x700 <__floatsisf+0x48>
 6fc:	96 e9       	ldi	r25, 0x96	; 150
 6fe:	11 c0       	rjmp	.+34     	; 0x722 <__floatsisf+0x6a>
 700:	77 23       	and	r23, r23
 702:	21 f0       	breq	.+8      	; 0x70c <__floatsisf+0x54>
 704:	9e e8       	ldi	r25, 0x8E	; 142
 706:	87 2f       	mov	r24, r23
 708:	76 2f       	mov	r23, r22
 70a:	05 c0       	rjmp	.+10     	; 0x716 <__floatsisf+0x5e>
 70c:	66 23       	and	r22, r22
 70e:	71 f0       	breq	.+28     	; 0x72c <__floatsisf+0x74>
 710:	96 e8       	ldi	r25, 0x86	; 134
 712:	86 2f       	mov	r24, r22
 714:	70 e0       	ldi	r23, 0x00	; 0
 716:	60 e0       	ldi	r22, 0x00	; 0
 718:	2a f0       	brmi	.+10     	; 0x724 <__floatsisf+0x6c>
 71a:	9a 95       	dec	r25
 71c:	66 0f       	add	r22, r22
 71e:	77 1f       	adc	r23, r23
 720:	88 1f       	adc	r24, r24
 722:	da f7       	brpl	.-10     	; 0x71a <__floatsisf+0x62>
 724:	88 0f       	add	r24, r24
 726:	96 95       	lsr	r25
 728:	87 95       	ror	r24
 72a:	97 f9       	bld	r25, 7
 72c:	08 95       	ret

0000072e <__fp_cmp>:
 72e:	99 0f       	add	r25, r25
 730:	00 08       	sbc	r0, r0
 732:	55 0f       	add	r21, r21
 734:	aa 0b       	sbc	r26, r26
 736:	e0 e8       	ldi	r30, 0x80	; 128
 738:	fe ef       	ldi	r31, 0xFE	; 254
 73a:	16 16       	cp	r1, r22
 73c:	17 06       	cpc	r1, r23
 73e:	e8 07       	cpc	r30, r24
 740:	f9 07       	cpc	r31, r25
 742:	c0 f0       	brcs	.+48     	; 0x774 <__fp_cmp+0x46>
 744:	12 16       	cp	r1, r18
 746:	13 06       	cpc	r1, r19
 748:	e4 07       	cpc	r30, r20
 74a:	f5 07       	cpc	r31, r21
 74c:	98 f0       	brcs	.+38     	; 0x774 <__fp_cmp+0x46>
 74e:	62 1b       	sub	r22, r18
 750:	73 0b       	sbc	r23, r19
 752:	84 0b       	sbc	r24, r20
 754:	95 0b       	sbc	r25, r21
 756:	39 f4       	brne	.+14     	; 0x766 <__fp_cmp+0x38>
 758:	0a 26       	eor	r0, r26
 75a:	61 f0       	breq	.+24     	; 0x774 <__fp_cmp+0x46>
 75c:	23 2b       	or	r18, r19
 75e:	24 2b       	or	r18, r20
 760:	25 2b       	or	r18, r21
 762:	21 f4       	brne	.+8      	; 0x76c <__fp_cmp+0x3e>
 764:	08 95       	ret
 766:	0a 26       	eor	r0, r26
 768:	09 f4       	brne	.+2      	; 0x76c <__fp_cmp+0x3e>
 76a:	a1 40       	sbci	r26, 0x01	; 1
 76c:	a6 95       	lsr	r26
 76e:	8f ef       	ldi	r24, 0xFF	; 255
 770:	81 1d       	adc	r24, r1
 772:	81 1d       	adc	r24, r1
 774:	08 95       	ret

00000776 <__fp_inf>:
 776:	97 f9       	bld	r25, 7
 778:	9f 67       	ori	r25, 0x7F	; 127
 77a:	80 e8       	ldi	r24, 0x80	; 128
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	08 95       	ret

00000782 <__fp_nan>:
 782:	9f ef       	ldi	r25, 0xFF	; 255
 784:	80 ec       	ldi	r24, 0xC0	; 192
 786:	08 95       	ret

00000788 <__fp_pscA>:
 788:	00 24       	eor	r0, r0
 78a:	0a 94       	dec	r0
 78c:	16 16       	cp	r1, r22
 78e:	17 06       	cpc	r1, r23
 790:	18 06       	cpc	r1, r24
 792:	09 06       	cpc	r0, r25
 794:	08 95       	ret

00000796 <__fp_pscB>:
 796:	00 24       	eor	r0, r0
 798:	0a 94       	dec	r0
 79a:	12 16       	cp	r1, r18
 79c:	13 06       	cpc	r1, r19
 79e:	14 06       	cpc	r1, r20
 7a0:	05 06       	cpc	r0, r21
 7a2:	08 95       	ret

000007a4 <__fp_round>:
 7a4:	09 2e       	mov	r0, r25
 7a6:	03 94       	inc	r0
 7a8:	00 0c       	add	r0, r0
 7aa:	11 f4       	brne	.+4      	; 0x7b0 <__fp_round+0xc>
 7ac:	88 23       	and	r24, r24
 7ae:	52 f0       	brmi	.+20     	; 0x7c4 <__fp_round+0x20>
 7b0:	bb 0f       	add	r27, r27
 7b2:	40 f4       	brcc	.+16     	; 0x7c4 <__fp_round+0x20>
 7b4:	bf 2b       	or	r27, r31
 7b6:	11 f4       	brne	.+4      	; 0x7bc <__fp_round+0x18>
 7b8:	60 ff       	sbrs	r22, 0
 7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <__fp_round+0x20>
 7bc:	6f 5f       	subi	r22, 0xFF	; 255
 7be:	7f 4f       	sbci	r23, 0xFF	; 255
 7c0:	8f 4f       	sbci	r24, 0xFF	; 255
 7c2:	9f 4f       	sbci	r25, 0xFF	; 255
 7c4:	08 95       	ret

000007c6 <__fp_split3>:
 7c6:	57 fd       	sbrc	r21, 7
 7c8:	90 58       	subi	r25, 0x80	; 128
 7ca:	44 0f       	add	r20, r20
 7cc:	55 1f       	adc	r21, r21
 7ce:	59 f0       	breq	.+22     	; 0x7e6 <__fp_splitA+0x10>
 7d0:	5f 3f       	cpi	r21, 0xFF	; 255
 7d2:	71 f0       	breq	.+28     	; 0x7f0 <__fp_splitA+0x1a>
 7d4:	47 95       	ror	r20

000007d6 <__fp_splitA>:
 7d6:	88 0f       	add	r24, r24
 7d8:	97 fb       	bst	r25, 7
 7da:	99 1f       	adc	r25, r25
 7dc:	61 f0       	breq	.+24     	; 0x7f6 <__fp_splitA+0x20>
 7de:	9f 3f       	cpi	r25, 0xFF	; 255
 7e0:	79 f0       	breq	.+30     	; 0x800 <__fp_splitA+0x2a>
 7e2:	87 95       	ror	r24
 7e4:	08 95       	ret
 7e6:	12 16       	cp	r1, r18
 7e8:	13 06       	cpc	r1, r19
 7ea:	14 06       	cpc	r1, r20
 7ec:	55 1f       	adc	r21, r21
 7ee:	f2 cf       	rjmp	.-28     	; 0x7d4 <__fp_split3+0xe>
 7f0:	46 95       	lsr	r20
 7f2:	f1 df       	rcall	.-30     	; 0x7d6 <__fp_splitA>
 7f4:	08 c0       	rjmp	.+16     	; 0x806 <__fp_splitA+0x30>
 7f6:	16 16       	cp	r1, r22
 7f8:	17 06       	cpc	r1, r23
 7fa:	18 06       	cpc	r1, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	f1 cf       	rjmp	.-30     	; 0x7e2 <__fp_splitA+0xc>
 800:	86 95       	lsr	r24
 802:	71 05       	cpc	r23, r1
 804:	61 05       	cpc	r22, r1
 806:	08 94       	sec
 808:	08 95       	ret

0000080a <__fp_zero>:
 80a:	e8 94       	clt

0000080c <__fp_szero>:
 80c:	bb 27       	eor	r27, r27
 80e:	66 27       	eor	r22, r22
 810:	77 27       	eor	r23, r23
 812:	cb 01       	movw	r24, r22
 814:	97 f9       	bld	r25, 7
 816:	08 95       	ret

00000818 <__gesf2>:
 818:	0e 94 97 03 	call	0x72e	; 0x72e <__fp_cmp>
 81c:	08 f4       	brcc	.+2      	; 0x820 <__gesf2+0x8>
 81e:	8f ef       	ldi	r24, 0xFF	; 255
 820:	08 95       	ret

00000822 <__mulsf3>:
 822:	0e 94 24 04 	call	0x848	; 0x848 <__mulsf3x>
 826:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__fp_round>
 82a:	0e 94 c4 03 	call	0x788	; 0x788 <__fp_pscA>
 82e:	38 f0       	brcs	.+14     	; 0x83e <__mulsf3+0x1c>
 830:	0e 94 cb 03 	call	0x796	; 0x796 <__fp_pscB>
 834:	20 f0       	brcs	.+8      	; 0x83e <__mulsf3+0x1c>
 836:	95 23       	and	r25, r21
 838:	11 f0       	breq	.+4      	; 0x83e <__mulsf3+0x1c>
 83a:	0c 94 bb 03 	jmp	0x776	; 0x776 <__fp_inf>
 83e:	0c 94 c1 03 	jmp	0x782	; 0x782 <__fp_nan>
 842:	11 24       	eor	r1, r1
 844:	0c 94 06 04 	jmp	0x80c	; 0x80c <__fp_szero>

00000848 <__mulsf3x>:
 848:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__fp_split3>
 84c:	70 f3       	brcs	.-36     	; 0x82a <__mulsf3+0x8>

0000084e <__mulsf3_pse>:
 84e:	95 9f       	mul	r25, r21
 850:	c1 f3       	breq	.-16     	; 0x842 <__mulsf3+0x20>
 852:	95 0f       	add	r25, r21
 854:	50 e0       	ldi	r21, 0x00	; 0
 856:	55 1f       	adc	r21, r21
 858:	62 9f       	mul	r22, r18
 85a:	f0 01       	movw	r30, r0
 85c:	72 9f       	mul	r23, r18
 85e:	bb 27       	eor	r27, r27
 860:	f0 0d       	add	r31, r0
 862:	b1 1d       	adc	r27, r1
 864:	63 9f       	mul	r22, r19
 866:	aa 27       	eor	r26, r26
 868:	f0 0d       	add	r31, r0
 86a:	b1 1d       	adc	r27, r1
 86c:	aa 1f       	adc	r26, r26
 86e:	64 9f       	mul	r22, r20
 870:	66 27       	eor	r22, r22
 872:	b0 0d       	add	r27, r0
 874:	a1 1d       	adc	r26, r1
 876:	66 1f       	adc	r22, r22
 878:	82 9f       	mul	r24, r18
 87a:	22 27       	eor	r18, r18
 87c:	b0 0d       	add	r27, r0
 87e:	a1 1d       	adc	r26, r1
 880:	62 1f       	adc	r22, r18
 882:	73 9f       	mul	r23, r19
 884:	b0 0d       	add	r27, r0
 886:	a1 1d       	adc	r26, r1
 888:	62 1f       	adc	r22, r18
 88a:	83 9f       	mul	r24, r19
 88c:	a0 0d       	add	r26, r0
 88e:	61 1d       	adc	r22, r1
 890:	22 1f       	adc	r18, r18
 892:	74 9f       	mul	r23, r20
 894:	33 27       	eor	r19, r19
 896:	a0 0d       	add	r26, r0
 898:	61 1d       	adc	r22, r1
 89a:	23 1f       	adc	r18, r19
 89c:	84 9f       	mul	r24, r20
 89e:	60 0d       	add	r22, r0
 8a0:	21 1d       	adc	r18, r1
 8a2:	82 2f       	mov	r24, r18
 8a4:	76 2f       	mov	r23, r22
 8a6:	6a 2f       	mov	r22, r26
 8a8:	11 24       	eor	r1, r1
 8aa:	9f 57       	subi	r25, 0x7F	; 127
 8ac:	50 40       	sbci	r21, 0x00	; 0
 8ae:	9a f0       	brmi	.+38     	; 0x8d6 <__mulsf3_pse+0x88>
 8b0:	f1 f0       	breq	.+60     	; 0x8ee <__mulsf3_pse+0xa0>
 8b2:	88 23       	and	r24, r24
 8b4:	4a f0       	brmi	.+18     	; 0x8c8 <__mulsf3_pse+0x7a>
 8b6:	ee 0f       	add	r30, r30
 8b8:	ff 1f       	adc	r31, r31
 8ba:	bb 1f       	adc	r27, r27
 8bc:	66 1f       	adc	r22, r22
 8be:	77 1f       	adc	r23, r23
 8c0:	88 1f       	adc	r24, r24
 8c2:	91 50       	subi	r25, 0x01	; 1
 8c4:	50 40       	sbci	r21, 0x00	; 0
 8c6:	a9 f7       	brne	.-22     	; 0x8b2 <__mulsf3_pse+0x64>
 8c8:	9e 3f       	cpi	r25, 0xFE	; 254
 8ca:	51 05       	cpc	r21, r1
 8cc:	80 f0       	brcs	.+32     	; 0x8ee <__mulsf3_pse+0xa0>
 8ce:	0c 94 bb 03 	jmp	0x776	; 0x776 <__fp_inf>
 8d2:	0c 94 06 04 	jmp	0x80c	; 0x80c <__fp_szero>
 8d6:	5f 3f       	cpi	r21, 0xFF	; 255
 8d8:	e4 f3       	brlt	.-8      	; 0x8d2 <__mulsf3_pse+0x84>
 8da:	98 3e       	cpi	r25, 0xE8	; 232
 8dc:	d4 f3       	brlt	.-12     	; 0x8d2 <__mulsf3_pse+0x84>
 8de:	86 95       	lsr	r24
 8e0:	77 95       	ror	r23
 8e2:	67 95       	ror	r22
 8e4:	b7 95       	ror	r27
 8e6:	f7 95       	ror	r31
 8e8:	e7 95       	ror	r30
 8ea:	9f 5f       	subi	r25, 0xFF	; 255
 8ec:	c1 f7       	brne	.-16     	; 0x8de <__mulsf3_pse+0x90>
 8ee:	fe 2b       	or	r31, r30
 8f0:	88 0f       	add	r24, r24
 8f2:	91 1d       	adc	r25, r1
 8f4:	96 95       	lsr	r25
 8f6:	87 95       	ror	r24
 8f8:	97 f9       	bld	r25, 7
 8fa:	08 95       	ret

000008fc <__divmodhi4>:
 8fc:	97 fb       	bst	r25, 7
 8fe:	07 2e       	mov	r0, r23
 900:	16 f4       	brtc	.+4      	; 0x906 <__stack+0x7>
 902:	00 94       	com	r0
 904:	07 d0       	rcall	.+14     	; 0x914 <__divmodhi4_neg1>
 906:	77 fd       	sbrc	r23, 7
 908:	09 d0       	rcall	.+18     	; 0x91c <__divmodhi4_neg2>
 90a:	0e 94 92 04 	call	0x924	; 0x924 <__udivmodhi4>
 90e:	07 fc       	sbrc	r0, 7
 910:	05 d0       	rcall	.+10     	; 0x91c <__divmodhi4_neg2>
 912:	3e f4       	brtc	.+14     	; 0x922 <__divmodhi4_exit>

00000914 <__divmodhi4_neg1>:
 914:	90 95       	com	r25
 916:	81 95       	neg	r24
 918:	9f 4f       	sbci	r25, 0xFF	; 255
 91a:	08 95       	ret

0000091c <__divmodhi4_neg2>:
 91c:	70 95       	com	r23
 91e:	61 95       	neg	r22
 920:	7f 4f       	sbci	r23, 0xFF	; 255

00000922 <__divmodhi4_exit>:
 922:	08 95       	ret

00000924 <__udivmodhi4>:
 924:	aa 1b       	sub	r26, r26
 926:	bb 1b       	sub	r27, r27
 928:	51 e1       	ldi	r21, 0x11	; 17
 92a:	07 c0       	rjmp	.+14     	; 0x93a <__udivmodhi4_ep>

0000092c <__udivmodhi4_loop>:
 92c:	aa 1f       	adc	r26, r26
 92e:	bb 1f       	adc	r27, r27
 930:	a6 17       	cp	r26, r22
 932:	b7 07       	cpc	r27, r23
 934:	10 f0       	brcs	.+4      	; 0x93a <__udivmodhi4_ep>
 936:	a6 1b       	sub	r26, r22
 938:	b7 0b       	sbc	r27, r23

0000093a <__udivmodhi4_ep>:
 93a:	88 1f       	adc	r24, r24
 93c:	99 1f       	adc	r25, r25
 93e:	5a 95       	dec	r21
 940:	a9 f7       	brne	.-22     	; 0x92c <__udivmodhi4_loop>
 942:	80 95       	com	r24
 944:	90 95       	com	r25
 946:	bc 01       	movw	r22, r24
 948:	cd 01       	movw	r24, r26
 94a:	08 95       	ret

0000094c <_exit>:
 94c:	f8 94       	cli

0000094e <__stop_program>:
 94e:	ff cf       	rjmp	.-2      	; 0x94e <__stop_program>
